#[gcode_macro M300]
#gcode:  SET_PIN PIN=_BEEPER_pin VALUE={S}
#        G4 P{P}
#        SET_PIN PIN=_BEEPER_pin VALUE=0

[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  # Start bed & extruder heating
  M140 S{BED_TEMP}
  M104 S150
  # Use absolute coordinates
  G90
  # Reset the G-Code Z offset (adjust Z offset if needed)
  SET_GCODE_OFFSET Z=0.0
  # Home the printer
  G28
  # Wait for bed to reach temperature
  M190 S{BED_TEMP}
  BED_MESH_CALIBRATE
  Smart_Park
  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  G28 Z
  LINE_PURGE

[gcode_macro PRINT_START]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  START_PRINT BED_TEMP={BED_TEMP} EXTRUDER_TEMP={EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode:
    {% set ENDY = printer.toolhead.axis_maximum.y|float - 10 %}
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 30mm
    G1 Z30 F3000
    G90
    G1 Y{ENDY}
    # Disable steppers
    M84

[gcode_macro PRINT_END]
gcode:
  END_PRINT

[gcode_macro PARK]
gcode:
    PAUSE

[gcode_macro M600]
description: Filament change macro
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    M118 Homing
    G28
  {% endif %}
  {% if printer.extruder.can_extrude == 0 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z > (max_z - 20.0) %}
        {% set z_safe = max_z %}
    {% else %}
        {% set z_safe = (act_z + 20.0) %}
    {% endif %}
    G91
    G1 Z{z_safe}
    G90
    G1 X0 Y0 F2100
    M118 Acquiring temperature
    M109 S200
  {% endif %}  
  {% if printer.pause_resume.is_paused == 0 %}
    PAUSE
  {% endif %}
  M118 First UNLOAD, then LOAD new and RESUME when ready

[gcode_macro UNLOAD]
description: Unload filament helper
gcode: 
  {% if printer.pause_resume.is_paused == 1 %}
    {% if printer.extruder.can_extrude == 1 %}
      G91
      G1 E5 F300
      G1 E-50 F300
      G90
    {% else %}
      RESPOND TYPE=error MSG="Extrude below minimum temp"
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="Printer must be paused"
  {% endif %}

[gcode_macro LOAD]
description: Load filament helper
gcode:
  {% if printer.pause_resume.is_paused == 1 %}
    {% if printer.extruder.can_extrude == 1 %}
      G91
      G1 E20 F300
      G90
    {% else %}
      RESPOND TYPE=error MSG="Extrude below minimum temp"
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="Printer must be paused"
  {% endif %}

[gcode_macro LOW_TEMP_CHECK_T]
gcode: 
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
#            M118 Heating from {printer.extruder.temperature} to {printer.extruder.target}.
            M109 S{printer.extruder.target|float} 
        {% endif %}
    {% else %} # if no setpoint for extruder
        {% if printer.extruder.target < T %}  # heat to T.
#            M118 No setpoint, heating to {T}.
            M109 S{T}
        {% endif %}
    {% endif %}

[gcode_macro M900]
description: Set pressure advance
gcode:
  SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(10) %}       #edit to your park position
    {% set y = params.Y|default(170) %}      #edit to your park position
    {% set z = params.Z|default(20)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate safe lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F300
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F4000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    G91
    G1 E{e} F300
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME  

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% set ENDY = printer.toolhead.axis_maximum.y|float - 10 %}
    G91       
    G1    E-1 F300
    G1 Z1 E-1 F4000
    G90
    G1 X0 Y{ENDY}
    M84
    M106 S0
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    
#[gcode_macro END_PRINT]
gcode:
    M140 S0
    M104 S0
    M106 S0
    G91
    G1 X0 Y0 E-3 F300
    G1 Z20 F3000
    G90
    M84
    BED_MESH_CLEAR

#[gcode_macro Bed_Mesh]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                                                                     # home if not homed
    {% endif %}
    SAVE_GCODE_STATE NAME=G29_STATE
    {% if T|int > 30 %}
        M140 S{T}                                                               # set bed temperature
        M190 S{T}                                                               # wait for bed temperature
    {% endif %}
    BED_MESH_CALIBRATE
    G0 X10 Y10 F6000


#[gcode_macro PROBE_CALIBRATE]
rename_existing: BASE_PROBE_CALIBRATE
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                                                                     # home if not homed
    {% endif %}
    BASE_PROBE_CALIBRATE

[gcode_macro _FILAMENT_BALL]
description: Helper: Round the filament tip
gcode:
  ##### set default parameter value #####
  {% set wait = params.WAIT|default(0) %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_FILAMENT_BALL
  # Ball up the filament tip
  G92 E0       ; zero the extruder
  M82          ; absolute extrusion
  G1 E2 F3600
  G1 E0 F3600
  G1 E4 F3600
  G1 E0 F3600
  G1 E8 F3600
  G1 E0 F3600
  M83          ; relative extrusion
  G1 E-25 F3600
  G4 P{wait|int * 1000}
  RESTORE_GCODE_STATE NAME=STATE_FILAMENT_BALL

# https://klipper.discourse.group/t/interruptible-heat-soak/1552
[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50

    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}
